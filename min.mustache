<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="shortcut icon" type="image/x-icon" href="favicon.ico">
		<title>Module Options</title>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css">
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" crossorigin="anonymous" />
	</head>
	<body>
		<section class="section">
			<div class="container">
				<h1 class="title">
					Module options
				</h1>
				<p class="subtitle">
				Options provided by modules in
				<strong> <a href="https://github.com/pinpox/nixos" target="_blank">github.com/pinpox/nixos</a></strong>
				</p>

				<div class="block">
					<p class="control has-icons-left">
					<input class="input" type="text" placeholder="Search" id="input">
					<span class="icon is-small is-left"> <i class="fa fa-search"></i> </span>
					</p>
				</div>
				<div class="results block" id=list>
					{{#options}}
					<div class="nixoption block" id="{{name}}">
						<div class="level">
							<div class="level-left">
								<div class="level-item">
									<h3 class="title is-3"> <a href="#{{name}}"># </a> {{name}}  </h3>
								</div>
							</div>
							<div class="level-right">
								<div class="level-item">
									<span class="tag is-medium is-info">{{type}}</span>
								</div>
							</div>
						</div>

						<p class="subtitle"> {{description}} </p>

						<div class="block">
							<p class="block"><strong>Default:</strong> <code>{{default}}</code> </p>
							<p class="block"><strong>Example:</strong> <code>{{example}}</code> </p>
						</div>
					</div>
					{{/options}}
				</div>
			</div>
		</section>
	</body>
</html>

<script charset="utf-8">

	const input = document.querySelector("#input");
	const list = document.querySelector("#list");
	const nixOptions = document.getElementsByClassName('nixoption');

	// Slice node list to be an array
	const nixOptionsList = [].slice.call(nixOptions);

	// Add event listener for keyup in input
	input.addEventListener('keyup', (e) => {

		// Set regex to be global and case insensitive (gi)
		const match = new RegExp(`${e.target.value}`, 'gi');

		// Create an array of results that gets passed any matching text
		let results = nixOptionsList.filter(opt => match.test(opt.innerText));

		// Remove all html inside the list
		list.innerHTML = '';

		// Create a for loop to loop through your results
		for (let i = 0; i < results.length; i++) {
			// Append each result to it's container
			list.appendChild(results[i])
		}
	});
</script>
